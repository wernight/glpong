/**
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * Copyright (c) 2003 Werner BEROUX
 * Mail: werner@beroux.com
 * Web : www.beroux.com
 *
 * \brief Render a fireword rocket.
 */

#ifndef INC_FIREWORK_H_
#define INC_FIREWORK_H_

#include "StdAfx.h"
#include "RandomMT.h"

class CFireworkRocket
{
// Construction
public:
  CFireworkRocket();
  virtual ~CFireworkRocket();
  bool Create();

// Operations
  bool Update(float dt);
  bool Render() const;

// Implementation
private:
  static const int ROCKET_FIRE = 300;    // Firework particles
  static const int EXPLOSION_PINK = 70;
  static const int EXPLOSION_FIRE = 20;

  // Structures
  typedef struct            // Create A Structure For Particle
  {
    float  ini_life;        // Life
    float  ini_size;        // Size
    float  weight;          // Weight
    float  xi;            // X Direction
    float  yi;            // Y Direction
    float  zi;            // Z Direction
    float  ini_color[3];      // RGB Color
    // Updated over time:
    bool  active;          // Active (Yes/No)
    float  life;
    float  size;
    float  x;            // X Position
    float  y;            // Y Position
    float  z;            // Z Position
    float  color[3];        // RGB Color
  } PARTICLE;            // Particles Structure

  void Explode();
  void CreateRocketSpark(PARTICLE *pParticle);

  PARTICLE m_partSpark[ROCKET_FIRE],    // Particle Array (Rocket's propulsion sparks)
      *m_partPink,          // Explosion's pink particles
      *m_partFire,          // Fire generated by the pink particles
      m_partRocket;            // Single Particle (Rocket)
  bool  m_bExploding;
};

#endif

