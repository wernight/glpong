/**
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * Copyright (c) 2003 Werner BEROUX
 * Mail: werner@beroux.com
 * Web : www.beroux.com
 *
 * \brief Render a fireword rocket.
 */

#pragma once

#include <array>
#include <glm/glm.hpp>
#include <memory>

#include "IObject.h"

class FireworkRocket {
  // Construction
 public:
  FireworkRocket();
  virtual ~FireworkRocket();

  // Operations
  bool Update(float dt);
  bool Render() const;

  // Implementation
 private:
  static constexpr int kRocketFireCount = 300;  // Firework particles
  static constexpr int kExplosionPinkCount = 70;
  static constexpr int kExplosionFireCount = 20;

  void Create();

  // Structures
  struct Particle {
    float ini_life;   // Life
    float ini_size;   // Size
    float weight;     // Weight
    glm::vec3 speed;  // Direction
    glm::vec3 ini_color;
    // Updated over time:
    bool active;  // Active (Yes/No)
    float life;
    float size;
    glm::vec3 pos;
    glm::vec3 color;
  };

  void Explode();
  void CreateRocketSpark(Particle &particle);

  std::array<Particle, kRocketFireCount>
      part_spark_;  // Particle Array (Rocket's propulsion sparks)
  std::array<Particle, kExplosionPinkCount> part_pink_;  // Explosion's pink particles
  std::array<Particle, kExplosionPinkCount * kExplosionFireCount>
      part_fire_;         // Fire generated by the pink particles
  Particle part_rocket_;  // Single Particle (Rocket)
  bool is_exploding_;

  GLuint spark_vao_ = 0;
  GLuint spark_vbo_ = 0;
  GLuint pink_vao_ = 0;
  GLuint pink_vbo_ = 0;
  GLuint fire_vao_ = 0;
  GLuint fire_vbo_ = 0;
};

class Firework : public IObject {
 public:
  Firework(GLuint texture);
  virtual ~Firework() = default;

  bool IsDone() const { return is_done_; }

  // Implementation of IObject.
  // Update the object.
  void Update(float fTime) override;

  // Render the object.
  void Render() const override;

  // Process event.
  bool ProcessEvent(EEvent nEvent, unsigned long wParam, unsigned long lParam) override;

 private:
  GLuint texture_;
  static constexpr int kRockets = 4;              // Number of simultaneous rockets for the firework
  std::array<FireworkRocket, kRockets> rockets_;  // Firework
  bool is_done_ = false;                          // Bool Variable To Exit Loop
};
